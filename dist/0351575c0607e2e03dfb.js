/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("// import './styles/style.css';\n\nconst { body } = document;\nconst wrapper = document.createElement('div');\n\nwrapper.classList.add('wrapper');\nbody.append(wrapper);\nwrapper.insertAdjacentHTML('afterbegin', '<h1 class=\"task\">Virtual Keyboard</h1>');\nwrapper.insertAdjacentHTML('beforeend', '<p class=\"description\">Change language -  Ctrl + Option. The keyboard was made in the MacOs system.</p>');\nwrapper.insertAdjacentHTML('beforeend', '<textarea autofocus placeholder=\"Text here...\" class=\"text-area\"  autofocus></textarea>');\nwrapper.insertAdjacentHTML('beforeend', '<div class=\"keyboard\"></div>');\n\nconst keyboard = document.querySelector('.keyboard');\nconst textArea = document.querySelector('.text-area');\n\n// arrays of symbols in en/ru and UpperCase/LowerCase\nconst enLowercase = [\n\t['`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', '&#8592'],\n\t['tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '&#92'],\n\t['caps lock', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', \"'\", 'enter'],\n\t['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 'shift'],\n\t['ctrl', 'option', 'cmd', ' ', 'cmd', 'option', '&#9666', '&#9662', '&#9662', '&#9666']\n];\n\nconst enUppercase = [\n\t'~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '&#8592',\n\t'tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}','|',\n\t'caps lock', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '\"', 'enter',\n\t'shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', 'shift',\n\t'ctrl', 'option', 'cmd', ' ', 'cmd', 'option', '&#9666', '&#9662', '&#9662', '&#9666'\n];\n\nconst ruLowercase = [\n\t']', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', '&#8592',\n\t'tab', 'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ', 'ё',\n\t'caps lock', 'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э', 'enter',\n\t'shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', '/', 'shift',\n\t'ctrl', 'option', 'cmd', ' ', 'cmd', 'option', '&#9666', '&#9662', '&#9662', '&#9666'\n];\n\nconst ruUppercase = [\n\t'[', '!', '\"', '№', '%', ':', ',', '.', ';', '(', ')', '_', '+', '&#8592',\n\t'tab', 'Й', 'Ц', 'У', 'К', 'Е', 'Н', 'Г', 'Ш', 'Щ', 'З', 'Х', 'Ъ', 'Ё',\n\t'caps lock', 'Ф', 'Ы', 'В', 'А', 'П', 'Р', 'О', 'Л', 'Д', 'Ж', 'Э', 'enter',\n\t'shift', 'Я', 'Ч', 'С', 'М', 'И', 'Т', 'Ь', 'Б', 'Ю', '?', 'shift',\n\t'ctrl', 'option', 'cmd', ' ', 'cmd', 'option', '&#9666', '&#9662', '&#9662', '&#9666'\n];\n\n// generate DOM keyboard\n\n\nlet enLowercaseArray = [];\n\nfor (let i = 0; i < enLowercase.length; i++){\n    let keyboardLine = document.createElement('div');\n    keyboardLine.classList.add('keyboard-line')\n    keyboard.append(keyboardLine);\n\n    for (let j = 0; j < enLowercase[i].length; j++){\n        let key = document.createElement('button');\n        key.classList.add('key');\n        keyboardLine.append(key);\n        enLowercaseArray.push(enLowercase[i][j])\n    }\n\n}\n\n// array of KeyCodes\nconst keyCodes = ['Backquote', 'Digit1', 'Digit2', 'Digit3', 'Digit4', 'Digit5', 'Digit6', 'Digit7', 'Digit8', 'Digit9', 'Digit0', 'Minus', 'Equal', 'Backspace',\n                      'Tab', 'KeyQ', 'KeyW', 'KeyE', 'KeyR', 'KeyT', 'KeyY', 'KeyU', 'KeyI', 'KeyO', 'KeyP', 'BracketLeft', 'BracketRight', 'Backlash',\n                      'CapsLock', 'KeyA', 'KeyS', 'KeyD', 'KeyF', 'KeyG', 'KeyH', 'KeyJ', 'KeyK', 'KeyL', 'Semicolon', 'Quote', 'Enter',\n                      'ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'NumpadDecimal', 'Period', 'Slash', 'ShiftRight',\n                      'ControlLeft', 'AltLeft', 'MetaLeft', 'Space', 'MetaRight', 'AltRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp', 'ArrowRight'\n];\n\n\nlet keys = document.querySelectorAll('button');\n\n\n// fill buttons by symbols\nfunction fillButtons (data){\n    for(let i = 0; i < keys.length; i++){\n        keys[i].innerHTML = data[i];\n    }\n}\n\n\nlet currentLanguage = JSON.parse(localStorage.getItem('lang'));\n\nif (!currentLanguage) {\n\tcurrentLanguage = [...enLowercaseArray];\n}\n\nlocalStorage.setItem('lang', JSON.stringify(currentLanguage));\n\n\nfillButtons(currentLanguage);\n\n\nlet currentCase = JSON.parse(localStorage.getItem('case'));\n\nif (!currentCase) {\n\tcurrentCase = [...currentLanguage];\n}\nlocalStorage.setItem('case', JSON.stringify(currentCase));\n\nlet capsLockPressed = JSON.parse(localStorage.getItem('caps-press'));\n\nif (!capsLockPressed) {\n\tcapsLockPressed = false;\n}\n\nlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n\n\n\n\n\n\n\nlet backspace = keys[13];\nbackspace.classList.add('backspace');\nlet tab = keys[14];\ntab.classList.add('tab');\nlet capsLock = keys[28];\ncapsLock.classList.add('caps-lock', 'additional');\n(capsLockPressed === true) ? capsLock.classList.add('key-press') : capsLock.classList.remove('key-press');\nlet enter = keys[40];\nenter.classList.add('enter');\nlet shiftLeft = keys[41];\nshiftLeft.classList.add('shift', 'shift-left', 'additional');\nlet shiftRight = keys[52];\nshiftRight.classList.add('shift', 'shift-right', 'additional');\nlet ctrlLeft = keys[53];\nctrlLeft.classList.add('control', 'additional');\nlet altLeft = keys[54];\naltLeft.classList.add('option', 'option-left', 'additional');\nlet cmdLeft = keys[55];\ncmdLeft.classList.add('cmd', 'cmd-left', 'additional');\nlet space = keys[56];\nspace.classList.add('space');\nlet cmdRight = keys[57];\ncmdRight.classList.add('cmd', 'cmd-right', 'additional');\nlet altRight = keys[58];\naltRight.classList.add('option', 'option-right', 'additional');\nlet arrLeft = keys[59];\narrLeft.classList.add('arrow', 'arrow-left', 'additional');\nlet arrDown = keys[60];\narrDown.classList.add('arrow', 'arrow-down', 'additional');\nlet arrUp = keys[61];\narrUp.classList.add('arrow', 'arrow-up', 'additional');\nlet arrRight = keys[62];\narrRight.classList.add('arrow', 'arrow-right', 'additional');\n\n\n// light on key-press\n\nfunction lightButtons(event) {\n\tfor (let i = 0; i < keys.length; i++){\n\t\tif (event.code !== 'CapsLock') {\n\t\t\tswitch (event.code) {\n\t\t\t\tcase keyCodes[i]:\n\t\t\t\t\tkeys[i].classList.toggle('key-press');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n  \n  }\n}\n\n// shift lower/upper function\n\nfunction shiftUpperCase(event) {\n\t// if (event.code == 'ShiftLeft' || event.code == 'ShiftRight' ) {\n\t// \t(keys[15].innerHTML === 'q') ? fillButtons(enUppercase) : fillButtons(enLowercaseArray);\n\t// } else if (event.code == 'ShiftLeft' || event.code == 'ShiftRight') {\n\t// \t(keys[15].innerHTML === 'й') ? fillButtons(ruUppercase) : fillButtons(ruLowercase);\n\t// }\n\n\tif (event.code == 'ShiftLeft' || event.code == 'ShiftRight' ) {\n\t\tif (keys[15].innerHTML === 'q') {\n\t\t\tfillButtons(enUppercase) \n\t\t}\n\t\tif (keys[15].innerHTML === 'й') {\n\t\t\tfillButtons(ruUppercase)\n\t\t}\n\n\t}\n\t\t\t\n}\n\nfunction shiftLowerCase(event) {\n\t// if (event.code == 'ShiftLeft' || event.code == 'ShiftRight' ) {\n\t// \t(keys[15].innerHTML === 'Q') ? fillButtons(enLowercaseArray) : fillButtons(enUppercase);\n\t// } else if (event.code == 'ShiftLeft' || event.code == 'ShiftRight' ) {\n\t// \t(keys[15].innerHTML === 'Й') ? fillButtons(ruLowercase) : fillButtons(ruUppercase);\n\t// }\n\n\tif (event.code == 'ShiftLeft' || event.code == 'ShiftRight' ) {\n\t\tif (keys[15].innerHTML === 'Q') {\n\t\t\tfillButtons(enLowercaseArray) \n\t\t}\n\t\tif (keys[15].innerHTML === 'Й') {\n\t\t\tfillButtons(ruLowercase)\n\t\t}\n\n\t}\n}\n// caps lock from real keyboard\nfunction capsLockCase(event) {\n\t\n\tif (event.code === 'CapsLock') {\n\n\t\tif (!event.getModifierState('CapsLock')) {\n\t\t\tcapsLock.classList.toggle('key-press');\n\t\t\tcapsLockPressed = false;\n\t\t\tlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\t\t\n\t\t\tif (keys[15].innerHTML === 'Q') {\n\t\t\t\tcurrentCase = [...enLowercaseArray];\n\t\t\t\tfillButtons(currentCase);\n\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentCase)); \n\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentCase)); \n\t\t\t}\n\t\t\tif (keys[15].innerHTML === 'Й') {\n\t\t\t\tcurrentCase = [...ruLowercase];\n\t\t\t\tfillButtons(currentCase);\n\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentCase)); \n\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentCase)); \n\t\t\t}\n\t\t}\n\n\t\tif (event.getModifierState('CapsLock')) {\n\t\t\tcapsLock.classList.toggle('key-press');\n\t\t\tcapsLockPressed = true;\n\t\t\tlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n\t\t\tif (keys[15].innerHTML === 'q') {\n\t\t\t\tcurrentCase = [...enUppercase];\n\t\t\t\tfillButtons(currentCase);\n\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentCase)); \n\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentCase)); \n\t\t\t}\n\t\t\tif (keys[15].innerHTML === 'й') {\n\t\t\t\tcurrentCase = [...ruUppercase];\n\t\t\t\tfillButtons(currentCase);\n\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentCase)); \n\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentCase)); \n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n}\n\nfunction changeLanguage(event) {\n\n\tif ((event.ctrlKey) && (event.altKey)) {\n\t\t// event.preventDefault();\n\t\tif (keys[15].innerHTML === 'q') {\n\n\t\t\t\t\t\tcurrentLanguage = [...ruLowercase];\n\t\t\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentLanguage));\n\t\t\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentLanguage));\n\t\t\t\t\t\tcapsLockPressed = false;\n\t\t\t\t\t\tlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n\t\t\t\t\t\tfillButtons(currentLanguage);\n\t\t\t\t\n\t\t} else if (keys[15].innerHTML === 'й') {\n\n\t\t\t\t\t\tcurrentLanguage = [...enLowercaseArray];\n\t\t\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentLanguage));\n\t\t\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentLanguage));\n\t\t\t\t\t\tcapsLockPressed = false;\n\t\t\t\t\t\tlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n\t\t\t\t\t\tfillButtons(currentLanguage);\n\t\t}\n\n\t\tif (keys[15].innerHTML === 'Q') {\n\n\t\t\tcurrentLanguage = [...ruUppercase];\n\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentLanguage));\n\t\t\tlocalStorage.setItem('case', JSON.stringify(currentLanguage));\n\t\t\tcapsLockPressed = true;\n\t\t\tlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n\t\t\tfillButtons(currentLanguage);\n\t\n\t\t} else if (keys[15].innerHTML === 'Й') {\n\n\t\t\t\t\tcurrentLanguage = [...enUppercase];\n\t\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentLanguage));\n\t\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentLanguage));\n\t\t\t\t\tcapsLockPressed = true;\n\t\t\t\t\tlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n\t\t\t\t\tfillButtons(currentLanguage);\n\t\t}\n\n\t}\n}\n\n\n// check event function\nfunction check(event) {\n\tconsole.log(event);\n\tconsole.log(event.target);\n\tconsole.log(event.code);\n\tconsole.log(event.getModifierState('CapsLock'));\n}\n\n\n// document.addEventListener('keypress', changeLanguage)\n\n\ndocument.addEventListener('keydown', check);\n\n\ndocument.addEventListener('keydown', (event) => {\n\tchangeLanguage(event);\n\tlightButtons(event);\n\tshiftUpperCase(event);\n\tcapsLockCase(event);\n\n\tif (event.code === 'Tab') {\n\t\tevent.preventDefault();\t\n\t\tlet cursorPosition = textArea.selectionStart;\n\t\tlet beforeText = textArea.value.slice(0, cursorPosition);\n\t\tlet afterText = textArea.value.slice(cursorPosition);\n\t\ttextArea.value = `${beforeText}\\t${afterText}`;\n\t\tcursorPosition += 1;\n\t}\n\t}\n);\n\n\ndocument.addEventListener('keyup', (event) => {\n\n\tlightButtons(event);\n\tshiftLowerCase(event);\n\tcapsLockCase(event);\n\t}\n);\n\n// virtual keyboard input\n\n\nkeyboard.addEventListener('click', virtualKeyboardInput);\n\nfunction virtualKeyboardInput(event){\n    \n\t\tif (event.target.classList.contains('caps-lock')) {\n\t\t\tevent.preventDefault()\n\t\t\t\n\t\t\tif (!event.target.classList.contains('key-press')) {\n\t\t\t\tcapsLock.classList.add('key-press');\n\t\t\t\tcapsLockPressed = true;\n\t\t\t\tlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\t\t\n\t\t\t\tif (keys[15].innerHTML === 'q') {\n\t\t\t\t\tcurrentCase = [...enUppercase];\n\t\t\t\t\tfillButtons(currentCase);\n\t\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentCase)); \n\t\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentCase)); \n\t\t\t\t}\n\t\t\t\tif (keys[15].innerHTML === 'й') {\n\t\t\t\t\tcurrentCase = [...ruUppercase];\n\t\t\t\t\tfillButtons(currentCase);\n\t\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentCase)); \n\t\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentCase)); \n\t\t\t\t}\n\t\t\t} else \t{\n\t\t\t\tif (event.target.classList.contains('caps-lock')) {\n\t\t\t\t\tif (event.target.classList.contains('key-press')) {\n\t\t\t\t\t\tcapsLock.classList.remove('key-press');\n\t\t\t\t\t\tcapsLockPressed = false;\n\t\t\t\t\t\tlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n\t\t\t\t\t\tif (keys[15].innerHTML === 'Q') {\n\t\t\t\t\t\t\tcurrentCase = [...enLowercaseArray];\n\t\t\t\t\t\t\tfillButtons(currentCase);\n\t\t\t\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentCase)); \n\t\t\t\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentCase)); \n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (keys[15].innerHTML === 'Й') {\n\t\t\t\t\t\t\tcurrentCase = [...ruLowercase];\n\t\t\t\t\t\t\tfillButtons(currentCase);\n\t\t\t\t\t\t\tlocalStorage.setItem('case', JSON.stringify(currentCase)); \n\t\t\t\t\t\t\tlocalStorage.setItem('lang', JSON.stringify(currentCase)); \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t\n\n\t\t\t\n\t\t}\n\n  let cursorPosition = textArea.selectionStart;\n  let cursorPositionEnd = textArea.selectionEnd;\n  let beforeText = textArea.value.slice(0, cursorPosition);\n  let afterText = textArea.value.slice(cursorPosition);\n\n    if (event.target.tagName === 'BUTTON' && event.target.classList.contains('additional') === false) {\n        textArea.value += event.target.innerHTML\n        cursorPosition += 1;\n    }\n\n    if (event.target.classList.contains('enter')) {\n        textArea.value = `${beforeText}\\n${afterText}`;\n        cursorPosition += 1;\n    }\n\n    if (event.target.classList.contains('tab')) {\n        textArea.value = `${beforeText}\\t${afterText}`;\n        cursorPosition += 1;\n    }\n\n    if (event.target.classList.contains('arrow-up')) {\n        cursorPosition -= 5;\n    }\n\n    if (event.target.classList.contains('arrow-down')) {\n        cursorPosition += 5;\n    }\n\n    if (event.target.classList.contains('arrow-left')) {\n        cursorPosition -= 1;\n    }\n\n    if (event.target.classList.contains('arrow-right')) {\n        cursorPosition += 1;\n    }\n\n    if (event.target.classList.contains('backspace')) {\n        if (cursorPositionEnd > cursorPosition) {\n            textArea.value = textArea.value.slice(0, cursorPosition) + textArea.value.slice(cursorPositionEnd);\n          } else {\n            textArea.value = beforeText.slice(0, -1) + afterText;\n            cursorPosition = cursorPosition > 0 ? cursorPosition - 1 : 0;\n          }\n    }\n\n    textArea.selectionStart = cursorPosition;\n    textArea.selectionEnd = cursorPosition;\n\n    textArea.blur();\n    textArea.focus();\n}\n\nkeyboard.addEventListener('mousedown', virtualKeyboardPress);\n\nfunction virtualKeyboardPress(event) {\n\n    if (event.target.classList.contains('shift')) {\n        event.target.classList.add('key-press');\n        if(keys[15].innerHTML === 'q'){\n            fillButtons\n\t\t\t\t\t(enUppercase)\n        } else {\n            fillButtons\n\t\t\t\t\t(ruUppercase)\n        }\n    \n    } else\n\n    if (event.target.tagName === 'BUTTON'){\n\t\t\tif (event.target.classList.contains('capsLock')){\n\t\t\t\treturn\n\t\t}\n        event.target.classList.add('key-press')\n    }\n\n\t\tif (event.code == 'ShiftLeft' || event.code == 'ShiftRight') {\t\t \n\t\t\t(keys[15].innerHTML === 'q') ? fillButtons(enUppercase) : fillButtons(ruUppercase);\t\t \n\t\t}\n\n}\n\nkeyboard.addEventListener('mouseup', virtualKeyboardOut);\n\nfunction virtualKeyboardOut(event) {\n\n    if (event.target.classList.contains('shift')) {\n        event.target.classList.remove('key-press');\n        if(keys[15].innerHTML === 'Q'){\n            fillButtons\n\t\t\t\t\t(enLowercaseArray)\n        } else {\n            fillButtons\n\t\t\t\t\t(ruLowercase)\n        }\n    \n    } else\n\n    if (event.target.tagName === 'BUTTON') {\n        if (event.target.classList.contains('capsLock')){\n            return\n        }\n      event.target.classList.remove('key-press');\n    }\n\n\t\tif (event.code == 'ShiftLeft' || event.code == 'ShiftRight' ) {\n\t\t\t\n\t\t\t(keys[15].innerHTML === 'Q') ? fillButtons(enLowercaseArray) : fillButtons(ruLowercase);\n\t\t\t\t\n\t\t}\n    \n}\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ })()
;