/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./styles/style.css":
/*!**************************!*\
  !*** ./styles/style.css ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./styles/style.css?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/style.css */ \"./styles/style.css\");\n\n\nconst { body } = document;\nconst wrapper = document.createElement('div');\n\nwrapper.classList.add('wrapper');\nbody.append(wrapper);\nwrapper.insertAdjacentHTML('afterbegin', '<h1 class=\"task\">Virtual Keyboard</h1>');\nwrapper.insertAdjacentHTML('beforeend', '<p class=\"description\">Change language -  Ctrl + Option. The keyboard was made in the MacOs system.</p>');\nwrapper.insertAdjacentHTML('beforeend', '<textarea autofocus placeholder=\"Text here...\" class=\"text-area\"  autofocus></textarea>');\nwrapper.insertAdjacentHTML('beforeend', '<div class=\"keyboard\"></div>');\n\nconst keyboard = document.querySelector('.keyboard');\nconst textArea = document.querySelector('.text-area');\n\n// arrays of symbols in en/ru and UpperCase/LowerCase\nconst enLowercase = [\n  ['`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', '&#8592'],\n  ['tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '&#92'],\n  ['caps lock', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', \"'\", 'enter'],\n  ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 'shift'],\n  ['ctrl', 'option', 'cmd', ' ', 'cmd', 'option', '&#9666', '&#9662', '&#9662', '&#9666'],\n];\n\nconst enUppercase = [\n  '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '&#8592',\n  'tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', '|',\n  'caps lock', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '\"', 'enter',\n  'shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', 'shift',\n  'ctrl', 'option', 'cmd', ' ', 'cmd', 'option', '&#9666', '&#9662', '&#9662', '&#9666',\n];\n\nconst ruLowercase = [\n  ']', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', '&#8592',\n  'tab', 'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ', 'ё',\n  'caps lock', 'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э', 'enter',\n  'shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', '/', 'shift',\n  'ctrl', 'option', 'cmd', ' ', 'cmd', 'option', '&#9666', '&#9662', '&#9662', '&#9666',\n];\n\nconst ruUppercase = [\n  '[', '!', '\"', '№', '%', ':', ',', '.', ';', '(', ')', '_', '+', '&#8592',\n  'tab', 'Й', 'Ц', 'У', 'К', 'Е', 'Н', 'Г', 'Ш', 'Щ', 'З', 'Х', 'Ъ', 'Ё',\n  'caps lock', 'Ф', 'Ы', 'В', 'А', 'П', 'Р', 'О', 'Л', 'Д', 'Ж', 'Э', 'enter',\n  'shift', 'Я', 'Ч', 'С', 'М', 'И', 'Т', 'Ь', 'Б', 'Ю', '?', 'shift',\n  'ctrl', 'option', 'cmd', ' ', 'cmd', 'option', '&#9666', '&#9662', '&#9662', '&#9666',\n];\n\n// generate DOM keyboard\n\nconst enLowercaseArray = [];\n\nfor (let i = 0; i < enLowercase.length; i += 1) {\n  const keyboardLine = document.createElement('div');\n  keyboardLine.classList.add('keyboard-line');\n  keyboard.append(keyboardLine);\n\n  for (let j = 0; j < enLowercase[i].length; j += 1) {\n    const key = document.createElement('button');\n    key.classList.add('key');\n    keyboardLine.append(key);\n    enLowercaseArray.push(enLowercase[i][j]);\n  }\n}\n\n// array of KeyCodes\nconst keyCodes = ['Backquote', 'Digit1', 'Digit2', 'Digit3', 'Digit4', 'Digit5', 'Digit6', 'Digit7', 'Digit8', 'Digit9', 'Digit0', 'Minus', 'Equal', 'Backspace',\n  'Tab', 'KeyQ', 'KeyW', 'KeyE', 'KeyR', 'KeyT', 'KeyY', 'KeyU', 'KeyI', 'KeyO', 'KeyP', 'BracketLeft', 'BracketRight', 'Backlash',\n  'CapsLock', 'KeyA', 'KeyS', 'KeyD', 'KeyF', 'KeyG', 'KeyH', 'KeyJ', 'KeyK', 'KeyL', 'Semicolon', 'Quote', 'Enter',\n  'ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'NumpadDecimal', 'Period', 'Slash', 'ShiftRight',\n  'ControlLeft', 'AltLeft', 'MetaLeft', 'Space', 'MetaRight', 'AltRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp', 'ArrowRight',\n];\n\nconst keys = document.querySelectorAll('button');\n\n// fill buttons by symbols\nfunction fillButtons(data) {\n  for (let i = 0; i < keys.length; i += 1) {\n    keys[i].innerHTML = data[i];\n  }\n}\n// language from localstorage\nlet currentLanguage = JSON.parse(localStorage.getItem('lang'));\n\nif (!currentLanguage) {\n  currentLanguage = [...enLowercaseArray];\n}\n\nlocalStorage.setItem('lang', JSON.stringify(currentLanguage));\n\nfillButtons(currentLanguage);\n// case from local storage\nlet currentCase = JSON.parse(localStorage.getItem('case'));\n\nif (!currentCase) {\n  currentCase = [...currentLanguage];\n}\nlocalStorage.setItem('case', JSON.stringify(currentCase));\n// capsLock status from local storage\nlet capsLockPressed = JSON.parse(localStorage.getItem('caps-press'));\n\nif (!capsLockPressed) {\n  capsLockPressed = false;\n}\n\nlocalStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n\nconst backspace = keys[13];\nbackspace.classList.add('backspace');\nconst tab = keys[14];\ntab.classList.add('tab');\nconst capsLock = keys[28];\ncapsLock.classList.add('caps-lock', 'additional');\nif (capsLockPressed === true) {\n  capsLock.classList.add('key-press');\n} else {\n  capsLock.classList.remove('key-press');\n}\nconst enter = keys[40];\nenter.classList.add('enter');\nconst shiftLeft = keys[41];\nshiftLeft.classList.add('shift', 'shift-left', 'additional');\nconst shiftRight = keys[52];\nshiftRight.classList.add('shift', 'shift-right', 'additional');\nconst ctrlLeft = keys[53];\nctrlLeft.classList.add('control', 'additional');\nconst altLeft = keys[54];\naltLeft.classList.add('option', 'option-left', 'additional');\nconst cmdLeft = keys[55];\ncmdLeft.classList.add('cmd', 'cmd-left', 'additional');\nconst space = keys[56];\nspace.classList.add('space');\nconst cmdRight = keys[57];\ncmdRight.classList.add('cmd', 'cmd-right', 'additional');\nconst altRight = keys[58];\naltRight.classList.add('option', 'option-right', 'additional');\nconst arrLeft = keys[59];\narrLeft.classList.add('arrow', 'arrow-left', 'additional');\nconst arrDown = keys[60];\narrDown.classList.add('arrow', 'arrow-down', 'additional');\nconst arrUp = keys[61];\narrUp.classList.add('arrow', 'arrow-up', 'additional');\nconst arrRight = keys[62];\narrRight.classList.add('arrow', 'arrow-right', 'additional');\n\n// light on key-press\n\nfunction lightButtons(event) {\n  for (let i = 0; i < keys.length; i += 1) {\n    if (event.code !== 'CapsLock') {\n      switch (event.code) {\n        case keyCodes[i]:\n          keys[i].classList.toggle('key-press');\n          break;\n\n        default:\n      }\n    }\n  }\n}\n\n// shift lower/upper function\n\nfunction shiftUpperCase(event) {\n  if (event.code === 'ShiftLeft' || event.code === 'ShiftRight') {\n    if (keys[15].innerHTML === 'q') {\n      fillButtons(enUppercase);\n    }\n    if (keys[15].innerHTML === 'й') {\n      fillButtons(ruUppercase);\n    }\n  }\n}\n\nfunction shiftLowerCase(event) {\n  if (event.code === 'ShiftLeft' || event.code === 'ShiftRight') {\n    if (keys[15].innerHTML === 'Q') {\n      fillButtons(enLowercaseArray);\n    }\n    if (keys[15].innerHTML === 'Й') {\n      fillButtons(ruLowercase);\n    }\n  }\n}\n// caps lock from real keyboard\nfunction capsLockCase(event) {\n  if (event.code === 'CapsLock') {\n    if (!event.getModifierState('CapsLock')) {\n      capsLock.classList.toggle('key-press');\n      capsLockPressed = false;\n      localStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n      if (keys[15].innerHTML === 'Q') {\n        currentCase = [...enLowercaseArray];\n        fillButtons(currentCase);\n        localStorage.setItem('case', JSON.stringify(currentCase));\n        localStorage.setItem('lang', JSON.stringify(currentCase));\n      }\n      if (keys[15].innerHTML === 'Й') {\n        currentCase = [...ruLowercase];\n        fillButtons(currentCase);\n        localStorage.setItem('case', JSON.stringify(currentCase));\n        localStorage.setItem('lang', JSON.stringify(currentCase));\n      }\n    }\n\n    if (event.getModifierState('CapsLock')) {\n      capsLock.classList.toggle('key-press');\n      capsLockPressed = true;\n      localStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n      if (keys[15].innerHTML === 'q') {\n        currentCase = [...enUppercase];\n        fillButtons(currentCase);\n        localStorage.setItem('case', JSON.stringify(currentCase));\n        localStorage.setItem('lang', JSON.stringify(currentCase));\n      }\n      if (keys[15].innerHTML === 'й') {\n        currentCase = [...ruUppercase];\n        fillButtons(currentCase);\n        localStorage.setItem('case', JSON.stringify(currentCase));\n        localStorage.setItem('lang', JSON.stringify(currentCase));\n      }\n    }\n  }\n}\n\nfunction changeLanguage(event) {\n  if ((event.ctrlKey) && (event.altKey)) {\n    if (keys[15].innerHTML === 'q') {\n      currentLanguage = [...ruLowercase];\n      localStorage.setItem('lang', JSON.stringify(currentLanguage));\n      localStorage.setItem('case', JSON.stringify(currentLanguage));\n      capsLockPressed = false;\n      localStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n      fillButtons(currentLanguage);\n    } else if (keys[15].innerHTML === 'й') {\n      currentLanguage = [...enLowercaseArray];\n      localStorage.setItem('lang', JSON.stringify(currentLanguage));\n      localStorage.setItem('case', JSON.stringify(currentLanguage));\n      capsLockPressed = false;\n      localStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n      fillButtons(currentLanguage);\n    }\n\n    if (keys[15].innerHTML === 'Q') {\n      currentLanguage = [...ruUppercase];\n      localStorage.setItem('lang', JSON.stringify(currentLanguage));\n      localStorage.setItem('case', JSON.stringify(currentLanguage));\n      capsLockPressed = true;\n      localStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n      fillButtons(currentLanguage);\n    } else if (keys[15].innerHTML === 'Й') {\n      currentLanguage = [...enUppercase];\n      localStorage.setItem('lang', JSON.stringify(currentLanguage));\n      localStorage.setItem('case', JSON.stringify(currentLanguage));\n      capsLockPressed = true;\n      localStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n      fillButtons(currentLanguage);\n    }\n  }\n}\n\ndocument.addEventListener('keydown', (event) => {\n  changeLanguage(event);\n  lightButtons(event);\n  shiftUpperCase(event);\n  capsLockCase(event);\n\n  if (event.code === 'Tab') {\n    event.preventDefault();\n    let cursor = textArea.selectionStart;\n    const prevText = textArea.value.slice(0, cursor);\n    const nextText = textArea.value.slice(cursor);\n    textArea.value = `${prevText}\\t${nextText}`;\n    cursor += 1;\n  }\n});\n\ndocument.addEventListener('keyup', (event) => {\n  lightButtons(event);\n  shiftLowerCase(event);\n  capsLockCase(event);\n});\n\n// virtual keyboard input\n\nfunction virtualCapsLock(event) {\n  if (event.target.classList.contains('caps-lock')) {\n    if (!event.target.classList.contains('key-press')) {\n      capsLock.classList.add('key-press');\n      capsLockPressed = true;\n      localStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n      if (keys[15].innerHTML === 'q') {\n        currentCase = [...enUppercase];\n        fillButtons(currentCase);\n        localStorage.setItem('case', JSON.stringify(currentCase));\n        localStorage.setItem('lang', JSON.stringify(currentCase));\n      }\n      if (keys[15].innerHTML === 'й') {\n        currentCase = [...ruUppercase];\n        fillButtons(currentCase);\n        localStorage.setItem('case', JSON.stringify(currentCase));\n        localStorage.setItem('lang', JSON.stringify(currentCase));\n      }\n    } else if (event.target.classList.contains('caps-lock')) {\n      if (event.target.classList.contains('key-press')) {\n        capsLock.classList.remove('key-press');\n        capsLockPressed = false;\n        localStorage.setItem('caps-press', JSON.stringify(capsLockPressed));\n        if (keys[15].innerHTML === 'Q') {\n          currentCase = [...enLowercaseArray];\n          fillButtons(currentCase);\n          localStorage.setItem('case', JSON.stringify(currentCase));\n          localStorage.setItem('lang', JSON.stringify(currentCase));\n        }\n        if (keys[15].innerHTML === 'Й') {\n          currentCase = [...ruLowercase];\n          fillButtons(currentCase);\n          localStorage.setItem('case', JSON.stringify(currentCase));\n          localStorage.setItem('lang', JSON.stringify(currentCase));\n        }\n      }\n    }\n  }\n}\n\nfunction virtualKeyboardInput(event) {\n  virtualCapsLock(event);\n\n  let cursor = textArea.selectionStart;\n  const cursorEnd = textArea.selectionEnd;\n  const prevText = textArea.value.slice(0, cursor);\n  const nextText = textArea.value.slice(cursor);\n\n  if (event.target.tagName === 'BUTTON' && (!event.target.classList.contains('additional'))) {\n    textArea.value += event.target.innerHTML;\n    cursor += 1;\n  }\n\n  if (event.target.classList.contains('arrow-up')) {\n    cursor -= prevText.length;\n  }\n\n  if (event.target.classList.contains('arrow-down')) {\n    cursor += nextText.length;\n  }\n\n  if (event.target.classList.contains('arrow-left')) {\n    cursor -= 1;\n  }\n\n  if (event.target.classList.contains('arrow-right')) {\n    cursor += 1;\n  }\n\n  if (event.target.classList.contains('enter')) {\n    textArea.value = `${prevText}\\n${nextText}`;\n    cursor += 1;\n  }\n\n  if (event.target.classList.contains('tab')) {\n    textArea.value = `${prevText}\\t${nextText}`;\n    cursor += 1;\n  }\n\n  if (event.target.classList.contains('backspace')) {\n    if (cursorEnd > cursor) {\n      textArea.value = textArea.value.slice(0, cursor) + textArea.value.slice(cursorEnd);\n    } else {\n      textArea.value = prevText.slice(0, -1) + nextText;\n      cursor = cursor > 0 ? cursor - 1 : 0;\n    }\n  }\n\n  textArea.selectionStart = cursor;\n  textArea.selectionEnd = cursor;\n  textArea.focus();\n}\n\nkeyboard.addEventListener('click', virtualKeyboardInput);\n\nfunction virtualKeyboardPress(event) {\n  if (event.target.classList.contains('shift')) {\n    event.target.classList.add('key-press');\n    if (keys[15].innerHTML === 'q') {\n      fillButtons(enUppercase);\n    } else {\n      fillButtons(ruUppercase);\n    }\n  } else\n\n  if (event.target.tagName === 'BUTTON') {\n    if (event.target.classList.contains('caps-lock')) {\n      return;\n    }\n    event.target.classList.add('key-press');\n  }\n}\nkeyboard.addEventListener('mousedown', virtualKeyboardPress);\n\nfunction virtualKeyboardOut(event) {\n  if (event.target.classList.contains('shift')) {\n    event.target.classList.remove('key-press');\n    if (keys[15].innerHTML === 'Q') {\n      fillButtons(enLowercaseArray);\n    } else {\n      fillButtons(ruLowercase);\n    }\n  } else\n\n  if (event.target.tagName === 'BUTTON') {\n    if (event.target.classList.contains('caps-lock')) {\n      return;\n    }\n    event.target.classList.remove('key-press');\n  }\n}\n\nkeyboard.addEventListener('mouseup', virtualKeyboardOut);\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;